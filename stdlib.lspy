(def {nil} {})
(def {true} 1)
(def {false} 0)

(def {fun} (\ {f b}
    {def (head f) (\ (tail f) b)}))

(fun {unpack f l}
    {eval (join (list f) l)})

(fun {pack f & xs} {f xs})

(def {curry} unpack)
(def {uncurry} pack)

(fun {do & li}
    {if (== li nil)
        {nil}
        {last li}})

(fun {let b}
    {((\ {_} b) ())})

(fun {not x} {- 1 x})
(fun {or x y} {+ x y})
(fun {and x y} {* x y})

(fun {flip f a b} {f b a})
(fun {ghost & xs} {eval xs})
(fun {comp f g x} {f (g x)})

(fun {fst li}
    {eval (head li)})

(fun {snd li}
    {eval (head (tail li))})

(fun {trd li}
    {eval (head (tail (tail l)))})

(fun {len li}
    {if (== li nil)
        {0}
        {+ 1 (len (tail li))}})

(fun {nth n li}
    {if (== n 0)
        {fst li}
        {nth (- n 1) (tail li)}})

(fun {last li}
    {nth (- (len li) 1) li})

(fun {take n li}
    {if (== n 0)
        {nil}
        {join (head li) (take (- n 1) (tail li))}})

(fun {drop n li}
    {if (== n 0)
        {li}
        {drop (- n 1) (tail li)}})

(fun {split n li}
    {list (take n li) (drop n li)})

(fun {elem x li}
    {if (== li nil)
        {false}
        {if (== x (fst li))
            {true}
            {elem x (tail l)}}})

            
